---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/login":
    post:
      summary: Logs in a user
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: user logged in
        '401':
          description: invalid credentials
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
  "/api/v1/logout":
    post:
      summary: Logs out a user
      tags:
      - Authentication
      security:
      - bearerAuth: []
      responses:
        '200':
          description: user logged out
        '400':
          description: no token provided
  "/api/v1/blogs":
    get:
      summary: Retrieves all blogs
      tags:
      - Blogs
      responses:
        '200':
          description: blogs found
    post:
      summary: Creates a blog
      tags:
      - Blogs
      parameters: []
      responses:
        '201':
          description: blog created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                introduction:
                  type: string
                conclusion:
                  type: string
                meta_title:
                  type: string
                meta_description:
                  type: string
                featured:
                  type: boolean
                length:
                  type: integer
                status:
                  type: string
                image:
                  type: string
              required:
              - title
              - introduction
              - conclusion
  "/api/v1/blogs/{id}":
    get:
      summary: Retrieves a blog
      tags:
      - Blogs
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: blog found
    put:
      summary: Updates a blog
      tags:
      - Blogs
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: blog updated
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                introduction:
                  type: string
                conclusion:
                  type: string
                meta_title:
                  type: string
                meta_description:
                  type: string
                featured:
                  type: boolean
                length:
                  type: integer
                status:
                  type: string
                image:
                  type: string
    delete:
      summary: Deletes a blog
      tags:
      - Blogs
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: blog deleted
  "/api/v1/categories":
    get:
      summary: Retrieves all categories
      tags:
      - Categories
      responses:
        '200':
          description: categories found
  "/api/v1/tags":
    get:
      summary: Retrieves all tags
      tags:
      - Tags
      responses:
        '200':
          description: tags found
  "/api/v1/users":
    get:
      summary: Retrieves all users
      tags:
      - Users
      responses:
        '200':
          description: users found
    post:
      summary: Creates a user
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: user created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                password_confirmation:
                  type: string
                name:
                  type: string
              required:
              - email
              - password
              - password_confirmation
              - name
  "/api/v1/users/{id}":
    get:
      summary: Retrieves a user
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: user found
    put:
      summary: Updates a user
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: user updated
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
    delete:
      summary: Deletes a user
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: user deleted
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: www.example.com
